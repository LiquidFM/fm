#include "memory_manager.h"

//#include <QFile>
//#include <QTextCodec>
//#include <QTextStream>


namespace Memory
{
	static MemoryManager *manager = 0;
}

//void *operator new(std::size_t size) throw (std::bad_alloc)
//{
//	return Memory::manager->allocate(size);
//}
//
//void *operator new[](std::size_t size) throw (std::bad_alloc)
//{
//	return Memory::manager->allocate(size);
//}
//
//void *operator new(std::size_t size, const std::nothrow_t&) throw()
//{
//	return Memory::manager->allocate(size);
//}
//
//void *operator new[](std::size_t size, const std::nothrow_t&) throw()
//{
//	return Memory::manager->allocate(size);
//}
//
//void operator delete(void *ptr, std::size_t size) throw ()
//{
//	Memory::manager->deallocate(ptr, size);
//}
//
//void operator delete(void *ptr) throw()
//{
//	Memory::manager->deallocate(ptr);
//}
//
//void operator delete[](void *ptr) throw()
//{
//	Memory::manager->deallocate(ptr);
//}
//
//void operator delete(void *ptr, const std::nothrow_t&) throw()
//{
//	Memory::manager->deallocate(ptr);
//}
//
//void operator delete[](void *ptr, const std::nothrow_t&) throw()
//{
//	Memory::manager->deallocate(ptr);
//}


MemoryManager::MemoryManager(std::size_t pageSize, std::size_t maxObjectSize, std::size_t objectAlignSize) :
//	m_leaks(0),
	m_allocator(pageSize, maxObjectSize, objectAlignSize)
{
	Memory::manager = this;
}

MemoryManager::~MemoryManager()
{
//	QFile file(QString::fromLatin1("memory.txt"));
//
//	if (file.open(QFile::WriteOnly | QFile::Append))
//	{
//		QTextStream stream(&file);
//		stream.setCodec(QTextCodec::codecForName("Windows-1251"));
//
//		stream << QString::fromLatin1("Memory allocated: ").append(QString::number(m_leaks)) << endl;
//
//		stream << QString::fromLatin1("Statistic:\tblock size\tallocations") << endl;
//		for (QMap<qint64, qint64>::const_iterator it = m_statistics.constBegin(), end = m_statistics.constEnd(); it != end; ++it)
//			stream << QString::fromLatin1("\t\t%1\t\t%2").arg(QString::number(it.key())).arg(QString::number(it.value())) << endl;
//	}
}

void *MemoryManager::allocate(std::size_t size)
{
	QMutex::Locker locker(&m_mutex);
//	++m_leaks;
//	++m_statistics[size];
	return m_allocator.allocate(size);
}

void MemoryManager::deallocate(void *p, std::size_t size)
{
	QMutex::Locker locker(&m_mutex);
//	--m_leaks;
	m_allocator.deallocate(p, size);
}

void MemoryManager::deallocate(void *p)
{
	QMutex::Locker locker(&m_mutex);
//	--m_leaks;
	m_allocator.deallocate(p);
}

MemoryManager *MemoryManager::instance()
{
	return Memory::manager;
}
